import streamlit as st
from langchain_core.messages import HumanMessage
from langchain_groq import ChatGroq   
from dotenv import load_dotenv
import os
import io
from docx import Document
import PyPDF2
from PIL import Image
import pytesseract

load_dotenv() 

st.set_page_config(page_title="AI d·ªãch ti·∫øng Nh·∫≠t", page_icon="ü§ñ", layout = "centered")

st.title("ü§ñ AI d·ªãch ti·∫øng Nh·∫≠t")
st.markdown("·ª®ng d·ª•ng d·ªãch ti·∫øng Nh·∫≠t s·ª≠ d·ª•ng m√¥ h√¨nh ng√¥n ng·ªØ l·ªõn (LLM) v√† c√°c c√¥ng c·ª• t√≠ch h·ª£p.")

model = ChatGroq(
        groq_api_key=os.getenv("GROQ_API_KEY"),
        model="meta-llama/llama-4-scout-17b-16e-instruct",
        temperature=0
    )

uploaded_file = st.file_uploader(
    "T·∫£i l√™n file vƒÉn b·∫£n/·∫£nh ti·∫øng Nh·∫≠t (txt, docx, pdf, png, jpg, jpeg)", 
    type=["txt", "docx", "pdf", "png", "jpg", "jpeg"]
)

def read_file(uploaded_file):
    text = ""
    if uploaded_file.type == "text/plain":
        text = uploaded_file.read().decode("utf-8")
    elif uploaded_file.type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
        doc = Document(uploaded_file)
        text = "\n".join([p.text for p in doc.paragraphs])
    elif uploaded_file.type == "application/pdf":
        pdf_reader = PyPDF2.PdfReader(uploaded_file)
        text = "\n".join([page.extract_text() for page in pdf_reader.pages])
    elif uploaded_file.type in ["image/png", "image/jpeg"]:
        image = Image.open(uploaded_file)
        text = pytesseract.image_to_string(image, lang="jpn")  # OCR ti·∫øng Nh·∫≠t
    return text

if uploaded_file is not None:
    japanese_text = read_file(uploaded_file)
    st.subheader("üìÑ VƒÉn b·∫£n g·ªëc (ti·∫øng Nh·∫≠t OCR/Text)")
    st.text_area("N·ªôi dung", japanese_text, height=200)

    if st.button("D·ªãch sang Ti·∫øng Vi·ªát"):
        response = model.invoke([
            HumanMessage(
                content=f"D·ªãch ƒëo·∫°n vƒÉn b·∫£n ti·∫øng Nh·∫≠t sau sang ti·∫øng Vi·ªát, k√®m ch√∫ th√≠ch h·ªçc ti·∫øng Nh·∫≠t (Kanji - Hiragana - Nghƒ©a):\n\n{japanese_text}",
                additional_kwargs={"job_role": "Japanese language teacher"}  
            )
        ])
        st.subheader("üìñ B·∫£n d·ªãch & Ch√∫ th√≠ch")
        st.write(response.content)
